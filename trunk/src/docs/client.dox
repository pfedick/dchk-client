/*
 * This file is part of the Domain CHecK Client (DCHK) from Patrick Fedick
 * (http://dchk.sourceforge.net/). It can be used to check the availability
 * of domains by using the DCHK protocol described in RFC 5144.
 *
 * $Author: pfedick $
 * $Revision: 1.3 $
 * $Date: 2009/03/12 11:56:19 $
 * $Id: client.dox,v 1.3 2009/03/12 11:56:19 pfedick Exp $
 *
 *
 * Copyright (C) 2008/2009 Patrick Fedick <dchk@pfp.de>
 *
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * SoftwareFoundation; either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, see <http://www.gnu.org/licenses/>.
 *
 */
/*!\page DCHK_client DCHK client

The DCHK client is a command line tool to send DCHK requests to a server. It is based on the
DCHK library and written in plain C.

The simplest way to make a query is to call the client with the domain names as parameter:
\code
dchk denic.de example.de frwzefgqw.de
\endcode

The client will use the TLD of the first domain an tries to find the correct DCHK server by
DNS. If this is not possible, you can tell the client manually which server to use:

\code
dchk -h dchk.denic.de -p 715 denic.de example.de frwzefgqw.de
\endcode

A typical answer of the client looks like this:
\code
denic.de: active [2008-06-12T15:55:00+02:00]
example.de: active [2008-06-12T15:55:00+02:00]
frwzefgqw.de: free
\endcode

If you enable the verbose mode, you will get detailed informations about request and response packets, which is meant for
debugging reasons:
\code
dchk -V --ex -h dchk.denic.de -p 715 denic.de
\endcode

Answer:
\code
[Request Header]
Packet size:             152 Bytes, Type: Request
Version:                 0
Transaction Id:          55031
Maximum Response Length: 1500 Bytes
Authority Length:        7 Bytes, Authority: unknown
Payload deflated:        yes
Deflate supported:       yes
Payload-Type:            XML

[Request beautified]
<?xml version="1.0" encoding="UTF-8"?>
<iris1:request xmlns:iris1="urn:ietf:params:xml:ns:iris1">
  <iris1:searchSet>
    <iris1:lookupEntity registryType="dchk1" entityClass="domain-name" entityName="denic.de"/>
  </iris1:searchSet>
</iris1:request>

[Response Header]
Packet size:             581 Bytes, Type: Response
Version:                 0
Transaction Id:          55031
Maximum Response Length: 0 Bytes
Authority Length:        0 Bytes, Authority: -
Payload deflated:        no
Deflate supported:       yes
Payload-Type:            XML

[Response beautified]
<?xml version="1.0" encoding="UTF-8"?>
<iris1:response xmlns:iris1="urn:ietf:params:xml:ns:iris1">
  <iris1:resultSet>
    <iris1:answer>
      <urn:domain xmlns:urn="urn:ietf:params:xml:ns:dchk1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" registryType="dchk1" entityClass="domain-name" entityName="denic.de" authority="de" xsi:type="urn:domainType">
        <urn:domainName>denic.de</urn:domainName>
        <urn:status>
          <urn:active/>
        </urn:status>
        <urn:lastDatabaseUpdateDateTime>2008-06-13T10:45:00+02:00</urn:lastDatabaseUpdateDateTime>
      </urn:domain>
    </iris1:answer>
  </iris1:resultSet>
</iris1:response>

[Result]
denic.de: active [2008-06-13T10:45:00+02:00]
\endcode

\section DCHK_client_status Explanation of domain status
The following table explains the meaning of the status keyword and compares it with the output of whois:
<table border="1" cellspacing="0" cellpadding="3" id="content">
<tr><th>Status DCHK</th><th>Description</th><th>Status whois</th></tr>
<tr><td>active</td><td>the domain is registered and connected</td><td>connect</td></tr>
<tr><td>inactive</td><td>the domain is registered but not connected (no DNS entries)</td><td>failed</td></tr>
<tr><td>reserved</td><td>the domain name is valid, but it's not allowed to register by policy</td><td>invalid or blocked</td></tr>
<tr><td>free</td><td>the domain is free and can be registered. "free" is not a status defined in RFC 5144, it's a
translation from the client from the error message "nameNotFound" described in RFC 3981, chapter 4.2.
</td><td>free</td></tr>
<tr><td>invalid</td><td>the domain name is not valid and cannot be registered. Again, this is
not a status defined in RFC 5144, it's a translation of the client from the error message
"invalidName" described in RFC 3981, chapter 4.2.
</td><td>invalid</td></tr>
</table>

\section DCHK_client_parameter Summary of parameters
The DCHK client understands the following parameters:
<table border=1 cellspacing=0 cellpadding=3 id="content">
<tr><th>Parameter</th><th>Description</th></tr>
<tr><td><tt>-h HOST</tt><td>Hostname or IP of DCHK-Server (default=DNS lookup)
</td></tr>

<tr><td><tt>-p PORT</tt></td><td>Port of DCHK-Server (Default=DNS lookup or port 715)
</td></tr>
<tr><td><tt>-a AUTHORITY</tt></td><td>Authority (Default=unknown)
</td></tr>

<tr><td><tt>-t TLD</tt></td><td>TLD to query, only used when no hostname is given (default=de)
</td></tr>
<tr><td><tt>-v</tt></td><td>Verbose: Request and Answer will be printed as XML
</td></tr>
<tr><td><tt>-V</tt></td><td>same as -v plus request and answer header will be explained
</td></tr>
<tr><td><tt>--ex</tt></td><td>When using verbose mode (-v), XML-output will be enhanced
for better reading
</td></tr>
<tr><td><tt>--ps #</tt></td><td>Set maximum packet size (default is 1500 bytes)
</td></tr>
<tr><td><tt>--md #</tt></td><td>Set maximum number of domains per DCHK query (default=20)
</td></tr>
<tr><td><tt>--dac</tt></td><td>Do not accept compressed answers (default=accept)
</td></tr>
<tr><td><tt>--sc</tt></td><td>Send compressed requests (default=uncompressed)
</td></tr>
<tr><td><tt>--timeout #</tt></td><td>Timeout for DCHK requests in seconds (default=5, 0=none)
</td></tr>
<tr><td><tt>Domain</tt></td><td>Domain names which should be checked. If you use the
word "version" instead of a domain name, a version
query will be send to the server. You must use the -t or
the -h and -p flags in conjunction with this
</td></tr>
<tr><td><tt>--fs</tt></td><td>With this feature you can check all TLDs if they provide DCHK servers.
It simply checks if the TLD's zonefile contains the required NAPTR and SRV records.
</td></tr>
</table>




*/
